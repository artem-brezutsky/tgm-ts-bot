import { Injectable, OnModuleInit } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { BotUpdate } from './bot.update';

@Injectable()
export class BotService implements OnModuleInit {
    private bot: Telegraf;

    constructor(private configService: ConfigService) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å .env
            const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');

            if (!token) {
                throw new Error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!');
            }

            // –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
            this.bot = new Telegraf(token);

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            new BotUpdate(this.bot);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ BotService:', error.message);
            process.exit(1);
        }
    }

    async onModuleInit() {
        try {
            // –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç
            this.bot.launch();
            console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error.message);
            process.exit(1);
        }
    }
}
